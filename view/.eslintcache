[{"/home/joao/dev/twitter-clone/view/src/index.js":"1","/home/joao/dev/twitter-clone/view/src/App.js":"2","/home/joao/dev/twitter-clone/view/src/context/token.js":"3","/home/joao/dev/twitter-clone/view/src/pages/Login.js":"4","/home/joao/dev/twitter-clone/view/src/pages/Home.js":"5","/home/joao/dev/twitter-clone/view/src/pages/Profile.js":"6","/home/joao/dev/twitter-clone/view/src/hooks/useHideOnOutsideClick.js":"7","/home/joao/dev/twitter-clone/view/src/pages/SignUp.js":"8","/home/joao/dev/twitter-clone/view/src/components/MainSideBar.js":"9","/home/joao/dev/twitter-clone/view/src/components/ToggleableSideBar.js":"10","/home/joao/dev/twitter-clone/view/src/components/InputField.js":"11","/home/joao/dev/twitter-clone/view/src/components/Tweetar.js":"12","/home/joao/dev/twitter-clone/view/src/components/ProfilePicture.js":"13","/home/joao/dev/twitter-clone/view/src/components/ShadedBox.js":"14","/home/joao/dev/twitter-clone/view/src/components/TweetCard.js":"15","/home/joao/dev/twitter-clone/view/src/components/DateInput.js":"16","/home/joao/dev/twitter-clone/view/src/functions/useDates.js":"17","/home/joao/dev/twitter-clone/view/src/functions/formatNumber.js":"18","/home/joao/dev/twitter-clone/view/src/hooks/useUploadImage.js":"19","/home/joao/dev/twitter-clone/view/src/components/UserList.js":"20","/home/joao/dev/twitter-clone/view/src/components/FollowingStatus.js":"21","/home/joao/dev/twitter-clone/view/src/components/FollowButton.js":"22"},{"size":407,"mtime":1611596212616,"results":"23","hashOfConfig":"24"},{"size":2410,"mtime":1611623569503,"results":"25","hashOfConfig":"24"},{"size":5593,"mtime":1611752138768,"results":"26","hashOfConfig":"24"},{"size":2489,"mtime":1611596212616,"results":"27","hashOfConfig":"24"},{"size":1573,"mtime":1611596212616,"results":"28","hashOfConfig":"24"},{"size":17710,"mtime":1611752972729,"results":"29","hashOfConfig":"24"},{"size":722,"mtime":1611596212616,"results":"30","hashOfConfig":"24"},{"size":9520,"mtime":1611675710982,"results":"31","hashOfConfig":"24"},{"size":8247,"mtime":1611596212616,"results":"32","hashOfConfig":"24"},{"size":8517,"mtime":1611677823183,"results":"33","hashOfConfig":"24"},{"size":1161,"mtime":1611615407129,"results":"34","hashOfConfig":"24"},{"size":2481,"mtime":1611670000557,"results":"35","hashOfConfig":"24"},{"size":443,"mtime":1611617121215,"results":"36","hashOfConfig":"24"},{"size":402,"mtime":1611667173996,"results":"37","hashOfConfig":"24"},{"size":8074,"mtime":1611755994486,"results":"38","hashOfConfig":"24"},{"size":1296,"mtime":1611596212616,"results":"39","hashOfConfig":"24"},{"size":2169,"mtime":1611596212616,"results":"40","hashOfConfig":"24"},{"size":278,"mtime":1611596212616,"results":"41","hashOfConfig":"24"},{"size":747,"mtime":1611624078888,"results":"42","hashOfConfig":"24"},{"size":3080,"mtime":1611755380174,"results":"43","hashOfConfig":"24"},{"size":746,"mtime":1611752087419,"results":"44","hashOfConfig":"24"},{"size":2683,"mtime":1611688867757,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"cwvrlo",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/joao/dev/twitter-clone/view/src/index.js",[],["98","99"],"/home/joao/dev/twitter-clone/view/src/App.js",["100"],"import React, { useContext } from 'react'\n\nimport { Switch, Route, Redirect, useLocation, useParams } from \"react-router-dom\"\n\nimport Login from './pages/Login'\nimport SignUp from './pages/SignUp'\nimport Home from './pages/Home'\nimport MainSideBar from './components/MainSideBar'\n\nimport { Context } from './context/token'\nimport ToggleableSideBar from './components/ToggleableSideBar'\nimport useHideOnOutsideClick from './hooks/useHideOnOutsideClick'\nimport Profile from './pages/Profile'\nimport { Helmet } from 'react-helmet'\n\nfunction App() {\n    const { token } = useContext(Context)\n    const location = useLocation()\n\n    const {\n        ref: refTgSideBar,\n        setVisible: setVisibleTgSideBar,\n        visible: visibleTgSideBar\n    } = useHideOnOutsideClick()\n\n    return (\n        <div className='app'>\n            <Helmet>\n                <title>Twitter</title>\n            </Helmet>\n            {!token && <Redirect to=\"/login\" />}\n            {!location.pathname.match(/(\\/login|\\/sign-up)/) &&\n                <>\n                    <MainSideBar\n                        refTgSideBar={refTgSideBar}\n                        setVisibleTgSideBar={setVisibleTgSideBar}\n                        visibleTgSideBar={visibleTgSideBar}\n                    />\n                    <ToggleableSideBar\n                        refTgSideBar={refTgSideBar}\n                        setVisibleTgSideBar={setVisibleTgSideBar}\n                        visibleTgSideBar={visibleTgSideBar}\n                    />\n                </>\n            }\n            <div className='app__main'>\n                <Switch>\n\n                    <Route path='/login'>\n                        <Login />\n                    </Route>\n\n                    <Route path='/sign-up'>\n                        <SignUp />\n                    </Route>\n                    <Route path='/aa'>\n                    </Route>\n\n                    <Route exact path='/'>\n                        <Home setVisibleTgSideBar={setVisibleTgSideBar} />\n                    </Route>\n\n                    <Route path='/profile/:name'>\n                        <Profile />\n                    </Route>\n                </Switch>\n            </div>\n            {!location.pathname.match(/(\\/login|\\/sign-up)/) &&\n                <div className='app__trending' style={{ width: 400 }}>\n\n                </div>\n            }\n\n        </div >\n    )\n}\n\nexport default App","/home/joao/dev/twitter-clone/view/src/context/token.js",["101","102","103","104","105"],"/home/joao/dev/twitter-clone/view/src/pages/Login.js",[],"/home/joao/dev/twitter-clone/view/src/pages/Home.js",["106","107","108"],"import { useContext, useEffect, useState } from \"react\"\nimport { Helmet } from \"react-helmet\";\n\nimport ProfilePicture from \"../components/ProfilePicture\"\nimport Tweetar from '../components/Tweetar'\nimport TweetCard from \"../components/TweetCard\"\n\nimport { Context } from '../context/token'\nimport '../styles/home.css'\n\nfunction Home({ setVisibleTgSideBar }) {\n    const {\n        API,\n        token,\n        user,\n        setUser,\n        isFetched,\n        setIsFetched,\n        posts,\n        setPosts,\n        fetchPosts\n    } = useContext(Context)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n\n        if (!isFetched) {\n            fetchPosts(`post`, setPosts)\n            setIsFetched(true)\n        }\n\n    }, [API, token, isFetched])\n\n    const timeline = posts.map(post => (\n        <TweetCard\n            key={post['_id']}\n            post={post}\n            user={user}\n            setPosts={setPosts}\n        />\n    ))\n\n    return (\n        <div className='home'>\n            <Helmet>\n                <title>Página Inicial / Twitter</title>\n            </Helmet>\n            <div className='header'>\n                <div className='header__profilePicture'>\n                    <ProfilePicture url={user.photo} callback={() => setVisibleTgSideBar(true)} />\n                </div>\n                <h1 className='header__title'>Página Inicial</h1>\n            </div>\n            <Tweetar customClass={{ container: 'home' }} />\n            {timeline}\n            <p>{errorMessage}</p>\n\n        </div>\n\n    )\n}\n\n\nexport default Home","/home/joao/dev/twitter-clone/view/src/pages/Profile.js",["109","110","111","112","113","114"],"/home/joao/dev/twitter-clone/view/src/hooks/useHideOnOutsideClick.js",["115"],"import { useEffect, useRef, useState } from \"react\"\n\nconst useHideOnOutsideClick = () => {\n    const ref = useRef(null)\n    const [visible, setVisible] = useState(false)\n\n    function handleClickOutside(event) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setVisible(false)\n\n            document.removeEventListener(\"mousedown\", handleClickOutside)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('click', handleClickOutside, true)\n        return () => {\n            document.addEventListener('click', handleClickOutside, true)\n            setVisible(false)\n        }\n    }, [ref])\n\n\n    return { ref, visible, setVisible }\n}\n\nexport default useHideOnOutsideClick","/home/joao/dev/twitter-clone/view/src/pages/SignUp.js",["116","117"],"import React, { useContext, useRef, useState, useEffect } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faCamera } from '@fortawesome/free-solid-svg-icons'\n\nimport { Context } from '../context/token'\nimport InputField from '../components/InputField'\nimport DateInput from '../components/DateInput'\n\nimport '../styles/signUp.css'\nimport ProfilePicture from '../components/ProfilePicture'\nimport { Helmet } from 'react-helmet'\nimport { Redirect } from 'react-router-dom'\nimport useUploadImage from '../hooks/useUploadImage'\n\nfunction SignUp() {\n    const inpFileRef = useRef(null)\n    const { API, parseMessage, setToken, token } = useContext(Context)\n    const [input, setInput] = useState({\n        name: '',\n        email: '',\n        birth: {\n            day: '',\n            month: '',\n            year: ''\n        },\n        password: '',\n        photoId: ''\n    })\n    const [errorMessage, setErrorMessage] = useState('');\n    const [page, setPage] = useState(0)\n    const {\n        ref: refPhoto,\n        updatePhoto,\n        photoUrl,\n        hasItBeenUsed,\n        photoFile,\n        setPhotoUrl\n    } = useUploadImage()\n\n    useEffect(() => {\n        return () => {\n            inpFileRef.current = null\n            setInput({\n                name: '',\n                email: '',\n                birth: {\n                    day: '',\n                    month: '',\n                    year: ''\n                },\n                password: '',\n                photo: ''\n            })\n            setErrorMessage('')\n            setPage(0)\n        }\n    }, [])\n\n    function nextPage() {\n        setErrorMessage('')\n        setPage(prev => prev + 1)\n    }\n\n    async function signUpValidation1() {\n        if (Object.values(input.birth).some(value => value == false)) {// eslint-disable-line \n            setErrorMessage(\"Invalid date\")\n            return\n        }\n\n        const reqJson = {\n            \"display_name\": input.name,\n            \"email\": input.email,\n            \"date_of_birth\": new Date(input.birth.year, input.birth.month - 1, input.birth.day)\n        }\n\n        const response = await fetch(`${API}/user/register`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify(reqJson)\n        })\n\n        const data = await response.json()\n\n        if (response.ok) {\n            nextPage()\n            return\n        }\n        setErrorMessage(parseMessage[data] || data)\n    }\n\n    async function signUpValidation2() {\n        const reqJson = {\n            \"display_name\": input.name,\n            \"email\": input.email,\n            \"date_of_birth\": new Date(input.birth.year, input.birth.month - 1, input.birth.day),\n            \"password\": input.password\n        }\n\n        const response = await fetch(`${API}/user/register`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify(reqJson)\n        })\n\n        const data = await response.json()\n\n        if (response.ok) {\n            nextPage()\n            return\n        }\n        setErrorMessage(parseMessage[data] || data)\n    }\n\n    async function storeImage() {\n        if (!photoFile) {\n            storeSignUp()\n            return\n        }\n        const photo = new FormData()\n        photo.append('photo', photoFile)\n\n        const imageResponse = await fetch(`${API}/user/image`, {\n            body: photo,\n            method: 'POST'\n        })\n\n        const imageData = await imageResponse.json()\n\n        if (imageResponse.ok) {\n            storeSignUp(imageData.url)\n        }\n        else {\n            setErrorMessage(imageData)\n        }\n    }\n\n    async function storeSignUp(photoUrl = '') {\n        const reqJson = {\n            \"display_name\": input.name,\n            \"email\": input.email,\n            \"date_of_birth\": new Date(input.birth.year, input.birth.month - 1, input.birth.day),\n            \"password\": input.password,\n            \"photo\": photoUrl\n        }\n\n        const userResponse = await fetch(`${API}/user/register`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify(reqJson)\n        })\n\n        const data = await userResponse.json()\n        if (userResponse.ok) {\n            const loginJson = {\n                \"email\": input.email,\n                \"password\": input.password\n            }\n            const loginResponse = await fetch(`${API}/user/login`, {\n                method: \"POST\",\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(loginJson)\n            })\n            const loginData = await loginResponse.json()\n            setToken(loginData)\n        }\n        setErrorMessage(parseMessage[data] || data)\n    }\n\n    return (\n        <div className='signUp'>\n            {token && <Redirect to='/' />}\n            <Helmet>\n                <title>Sign up for Twitter / Twitter</title>\n            </Helmet>\n            <FontAwesomeIcon className='signUp__icon' icon={faTwitter} />\n            <button\n                className='signUp__button blueButton'\n                onClick={page === 0 ? signUpValidation1 : page === 1 ? signUpValidation2 : storeImage}\n            >\n                Next\n            </button>\n\n            <div className='signUp__pages'>\n                {\n                    page == 0 ? // eslint-disable-line \n                        <section className='signUp__one'>\n                            <h3 className='signUp__title'>Create your account</h3>\n                            <form className='signUp__form'>\n                                <InputField\n                                    input={input}\n                                    setInput={setInput}\n                                    name='name'\n                                />\n\n                                <InputField\n                                    input={input}\n                                    setInput={setInput}\n                                    name='email'\n                                />\n\n                                <h5 className='signUp__birth__title'>Date of birth</h5>\n                                <p className='signUp__birth__text'>This will not be shown publicly. Confirm your own age, even if this account is for a business, a pet, or something else.</p>\n\n                                <div className='signUp__date'>\n                                    <DateInput\n                                        input={input}\n                                        setInput={setInput}\n                                        name='month'\n                                        obj='birth'\n                                    />\n                                    <DateInput\n                                        input={input}\n                                        setInput={setInput}\n                                        name='day'\n                                        obj='birth'\n                                    />\n                                    <DateInput\n                                        input={input}\n                                        setInput={setInput}\n                                        name='year'\n                                        obj='birth'\n                                    />\n                                </div>\n                            </form>\n\n                        </section>\n                        :\n                        page == 1 ?\n                            <section className='signUp__one'>\n                                <h3 className='signUp__title'>You'll need a password</h3>\n                                <p className='signUp__birth__text'>Make sure it’s 8 characters or more.</p>\n\n                                <InputField\n                                    input={input}\n                                    setInput={setInput}\n                                    name='password'\n                                />\n                            </section>\n                            :\n                            <section className='signUp__one'>\n                                <h3 className='signUp__title'>Pick a pofile picture</h3>\n                                <p className='signUp__birth__text'>Have a favorite selfie? Upload it now.</p>\n\n                                <input\n                                    ref={refPhoto}\n                                    style={{ display: 'none' }}\n                                    type=\"file\"\n                                    accept=\".jpeg, .png, .jpg\"\n                                    onChange={updatePhoto}\n                                    name={'photo'}\n                                />\n                                <div className='signUp__picture'>\n                                    <ProfilePicture url={photoUrl} callback={() => refPhoto.current.click()}>\n                                        {<FontAwesomeIcon className='uploadPhotoIcon' icon={faCamera} />}\n                                    </ProfilePicture>\n                                </div>\n                            </section>\n                }\n                <p className='login__errorMessage'>{errorMessage}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default SignUp","/home/joao/dev/twitter-clone/view/src/components/MainSideBar.js",["118","119","120"],"import React, { useContext } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\"\n\nimport { Context } from '../context/token'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faHome,\n    faBell,\n    faHashtag,\n    faEnvelope,\n    faUser,\n    faSearch,\n    faTimes,\n    faFeatherAlt,\n    faPlus,\n    faEllipsisH\n} from '@fortawesome/free-solid-svg-icons'\nimport {\n    faBell as farBell,\n    faEnvelope as farEnvelope,\n    faUser as farUser\n} from '@fortawesome/free-regular-svg-icons'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nimport '../styles/app.css'\nimport '../styles/hover.css'\nimport Tweetar from './Tweetar'\nimport ProfilePicture from './ProfilePicture'\nimport useHideOnOutsideClick from '../hooks/useHideOnOutsideClick'\nimport ShadedBox from './ShadedBox'\n\n\n\nfunction MainmainSideBar({ setVisibleTgSideBar }) {\n    const { token, user, logOff } = useContext(Context)\n    const location = useLocation()\n    const history = useHistory()\n\n    const {\n        ref: refTweetar,\n        visible: visibleTweetar,\n        setVisible: setVisibleTweetar\n    } = useHideOnOutsideClick()\n\n    const {\n        ref: refProfileDetails,\n        visible: visibleProfileDetails,\n        setVisible: setVisibleProfileDetails\n    } = useHideOnOutsideClick()\n\n    const navbarItens = [\n        {\n            icon: faTwitter,\n            label: '',\n            class: 'navbar__item--twitter',\n        },\n        {\n            icon: faHome,\n            label: 'Página Inicial',\n            path: '/',\n            action: () => { history.push(`/`) }\n        },\n        {\n            icon: faHashtag,\n            label: 'Explorar',\n            class: 'navbar__item--hashtag'\n        },\n\n        {\n            icon: faSearch,\n            label: 'Pesquisar',\n            class: 'navbar__item--search'\n        },\n        {\n            icon: farBell,\n            label: 'Notificações'\n        },\n        {\n            icon: farEnvelope,\n            label: 'Mensagens'\n        },\n        {\n            icon: location.pathname === `/profile/${user.name}` ? faUser : farUser,\n            label: 'Perfil',\n            class: 'navbar__item--profile',\n            path: `/profile/${user.name}`,\n            action: () => { history.push(`/profile/${user.name}`) }\n        }, {\n            icon: faEllipsisH,\n            label: 'Mais',\n            class: 'navbar__item--more',\n            action: () => setVisibleTgSideBar(true)\n        },\n    ]\n\n    return (\n        <>\n            <div className='app__mainSideBar'>\n                <nav className='navbar'>\n                    <ul className='navbar__list'>\n                        {navbarItens.map(item => (\n                            <li className={`navbar__item\n                                    ${item.class ? item.class : ''}\n                                    ${item.path === location.pathname ? 'selectedIcon' : ''}\n                                    `}\n                                key={item.label}\n                                onClick={item.action}\n                            >\n                                <div className={`navbar__item__icon`}>\n                                    <FontAwesomeIcon icon={item.icon} />\n                                </div>\n                                {item.label &&\n                                    <p className='navbar__item__label'>{item.label}</p>\n                                }\n                            </li>\n                        ))}\n                        <li className='navlist__tweetarBtn--circular--mainSideBar'>\n                            <button\n                                className='blueButton navlist__tweetarBtn--circular--mainSideBar navlist__tweetarBtn--circular'\n                                onClick={() => setVisibleTweetar(true)}\n                            >\n                                <div >\n                                    <FontAwesomeIcon\n                                        className='tweetarBtn__icon1'\n                                        icon={faFeatherAlt}\n                                    />\n                                    <FontAwesomeIcon\n                                        className='tweetarBtn__icon2'\n                                        icon={faPlus}\n                                    />\n                                </div>\n                            </button>\n                        </li>\n                    </ul>\n                    <button\n                        className='blueButton navlist__tweetarBtn'\n                        onClick={() => setVisibleTweetar(true)}\n                    >\n                        Tweetar\n                        </button>\n                </nav>\n\n                <div className='mainSideBar__profileCard__wrapper' ref={refProfileDetails}>\n                    <div\n                        className='mainSideBar__profileCard--min mainSideBar__profileCard'\n                        onClick={() => setVisibleProfileDetails(prev => !prev)}\n                    >\n                        <div className='profileCard__photo'>\n                            <ProfilePicture url={user.photo} />\n                        </div>\n                        <div className='profileCard__id profileCard__id--mediaQuerry'>\n                            <h3 className='displayName'>{user['display_name']}</h3>\n                            <h4 className='username'>@{user.name}</h4>\n                        </div>\n                        <FontAwesomeIcon className='tweet__showOptions profileCard__id--mediaQuerry' icon={faEllipsisH} />\n                    </div>\n                    <div\n\n                        className='profileCard__details'\n                        style={{\n                            transform: `scale(${visibleProfileDetails ? '1' : '0'})`\n                        }}\n                    >\n                        <div className='mainSideBar__profileCard profileCard__details__header'>\n                            <div className='profileCard__photo'>\n                                <ProfilePicture url={user.photo} />\n                            </div>\n                            <div className='profileCard__id'>\n                                <h3 className='displayName'>{user['display_name']}</h3>\n                                <h4 className='username'>@{user.name}</h4>\n                            </div>\n                        </div>\n                        <p onClick={logOff} className='profileCard__details__logOff'>\n                            Sair de @{user.name}\n                        </p>\n                    </div>\n\n                </div>\n            </div>\n\n            <ShadedBox condition={visibleTweetar}>\n                <div\n                    className='app__tweetar' ref={refTweetar}\n                    style={{ display: visibleTweetar ? 'unset' : 'none' }}\n                >\n                    <div className='app__tweetar__header navHeader'>\n                        <button\n                            className='app__tweetar__close navHeader__icon'\n                            onClick={() => setVisibleTweetar(false)}\n                        >\n                            <FontAwesomeIcon icon={faTimes} />\n                        </button>\n                    </div>\n                    <div className='app__tweetar__main'>\n                        <Tweetar\n                            setVisible={setVisibleTweetar}\n                            customClass={{ input: 'app', button: 'app' }}\n                        />\n                    </div>\n                </div>\n            </ShadedBox>\n\n            <button\n                className='blueButton navlist__tweetarBtn--circular navlist__tweetarBtn--circular--absolute'\n                onClick={() => setVisibleTweetar(true)}\n            >\n                <div >\n                    <FontAwesomeIcon\n                        className='tweetarBtn__icon1'\n                        icon={faFeatherAlt}\n                    />\n                    <FontAwesomeIcon\n                        className='tweetarBtn__icon2'\n                        icon={faPlus}\n                    />\n                </div>\n            </button>\n\n        </>\n\n    )\n}\n\nexport default MainmainSideBar","/home/joao/dev/twitter-clone/view/src/components/ToggleableSideBar.js",["121","122"],"import { faTimes, faUser, faCog, faBrush, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useContext } from 'react'\n\n\nimport '../styles/toggleableSideBar.css'\nimport ProfilePicture from './ProfilePicture'\nimport useHideOnOutsideClick from '../hooks/useHideOnOutsideClick'\nimport ShadedBox from './ShadedBox'\nimport formatNumber from '../functions/formatNumber'\n\nimport { Context } from '../context/token'\nimport { useHistory } from 'react-router-dom'\nimport FollowingStatus from './FollowingStatus'\n\nfunction ToggleableSideBar({ visibleTgSideBar, setVisibleTgSideBar, refTgSideBar }) {\n    const history = useHistory()\n\n    const { user,\n        logOff,\n        getHsla,\n        colorThemes,\n        bgThemes,\n        switchColorTheme,\n        switchBgTheme,\n        selectedTheme,\n        setSelectedTheme\n    } = useContext(Context)\n\n    const {\n        ref: refThemes,\n        visible: visibleThemes,\n        setVisible: setVisibleThemes\n    } = useHideOnOutsideClick()\n\n    const menuItens = [\n        {\n            icon: faUser,\n            label: 'Perfil',\n            action: () => {\n                history.push(`/profile/${user.name}`)\n            }\n        },\n        {\n            icon: faCog,\n            label: 'Configurações e privacidade'\n        },\n        {\n            icon: faBrush,\n            label: 'Tela',\n            action: () => setVisibleThemes(true)\n        },\n        {\n            label: 'Sair',\n            class: 'toggleableSideBar__buttons__item--sair',\n            action: logOff\n        }\n    ]\n\n    const colorItens = [\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f499.svg', color: colorThemes[0] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/2b50.svg', color: colorThemes[1] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f338.svg', color: colorThemes[2] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f419.svg', color: colorThemes[3] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f525.svg', color: colorThemes[4] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f951.svg', color: colorThemes[5] }\n    ]\n\n    const bgItens = [\n        { label: 'Padrão', color: bgThemes[0] },\n        { label: 'Um pouco escuro', color: bgThemes[1] },\n        { label: 'Superescuro', color: bgThemes[2] }\n    ]\n\n    return (\n        <div className='toggleableSideBar--wrapper'>\n            <ShadedBox condition={visibleTgSideBar}>\n            </ShadedBox>\n            <div\n                className='toggleableSideBar' ref={refTgSideBar}\n                style={{\n                    transform: `translateX(${visibleTgSideBar ? '0' : '-125%'})`,\n                    transition: 'transform .2s ease-in-out'\n                }}\n            >\n                <header className='toggleableSideBar__header'>\n                    <h1 className='toggleableSideBar__title'>Informações da conta</h1>\n                    <button\n                        className='app__tweetar__close navHeader__icon'\n                        onClick={() => setVisibleTgSideBar(false)}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                    </button>\n                </header>\n                <div className='toggleableSideBar__profile'>\n                    <div className='toggleableSideBar__picture'>\n                        <ProfilePicture url={user.photo} />\n                    </div>\n                    <div className='toggleableSideBar__id'>\n                        <h3 className='displayName'>{user['display_name']}</h3>\n                        <h4 className='username'>@{user.name}</h4>\n                    </div>\n                    <FollowingStatus\n                        username={user.name}\n                        following={user.following.length}\n                        followers={user.followers.length}\n                        callback={() => setVisibleTgSideBar(false)}\n                    />\n                </div>\n                <div className='toggleableSideBar__buttons'>\n                    {menuItens.map(item => (\n                        <button\n                            className={`toggleableSideBar__buttons__item\n                                ${item.class ? item.class : ''}`\n                            }\n                            key={item.label}\n                            onClick={() => {\n                                if (item.action) {\n                                    item.action()\n                                    setVisibleTgSideBar(false)\n                                }\n                            }}\n                        >\n                            {item.icon &&\n                                <FontAwesomeIcon className='toggleableSideBar__icon' icon={item.icon} />\n                            }\n                            <p>{item.label}</p>\n                        </button>\n                    ))}\n                </div>\n            </div>\n            <ShadedBox condition={visibleThemes}>\n                <div className='themes' ref={refThemes}>\n                    <div className='themes__header' >\n                        <FontAwesomeIcon\n                            className='themes__close' icon={faTimes}\n                            onClick={() => setVisibleThemes(false)}\n                        />\n                        <h1 className='themes__title'>Personalizar sua exibição</h1>\n                    </div>\n                    <div className='themes--wrapper'>\n                        <p className='themes__label'>Color</p>\n                        <div className='themes__color themes__box'>\n                            {colorItens.map((item, i) => (\n                                <div className='themes__color__item' key={item.color}>\n                                    <button\n                                        className='color__item__button'\n                                        style={{ background: getHsla(item.color) }}\n                                        onClick={() => switchColorTheme(i)}\n                                    >\n                                        {selectedTheme.color === i &&\n                                            <FontAwesomeIcon className='color__item__checked' icon={faCheck} />\n                                        }\n                                    </button>\n                                    <img className='color__item__icon' src={item.icon} />\n\n                                </div>\n                            ))}\n                        </div>\n                        <p className='themes__label'>Plano de fundo</p>\n                        <div className='themes__box themes__bg'>\n                            {\n                                bgItens.map((item, i) => (\n                                    <div className='themes__bg__item'\n                                        key={i}\n                                        style={{\n                                            background: getHsla(item.color.primary),\n                                            color: item.color.txt,\n                                            border: selectedTheme.bg === i ?\n                                                `solid ${getHsla(colorThemes[selectedTheme.color])} 4px`\n                                                : 'none'\n                                        }}\n                                        onClick={() => setSelectedTheme(() => switchBgTheme(i))}\n                                    >\n                                        <input\n                                            className='bg__item__icon'\n                                            type='radio'\n                                            checked={selectedTheme.bg === i}\n                                            onClick={() => { }}\n                                        />\n                                        <label className='bg__item__label'> {item.label}</label>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                    <button\n                        className='blueButton themes__button'\n                        onClick={() => setVisibleThemes(false)}\n                    >\n                        Concluído\n                    </button>\n                </div>\n            </ShadedBox>\n        </div>\n    )\n}\n\nexport default ToggleableSideBar","/home/joao/dev/twitter-clone/view/src/components/InputField.js",[],"/home/joao/dev/twitter-clone/view/src/components/Tweetar.js",[],"/home/joao/dev/twitter-clone/view/src/components/ProfilePicture.js",[],"/home/joao/dev/twitter-clone/view/src/components/ShadedBox.js",[],"/home/joao/dev/twitter-clone/view/src/components/TweetCard.js",[],"/home/joao/dev/twitter-clone/view/src/components/DateInput.js",[],"/home/joao/dev/twitter-clone/view/src/functions/useDates.js",[],"/home/joao/dev/twitter-clone/view/src/functions/formatNumber.js",[],"/home/joao/dev/twitter-clone/view/src/hooks/useUploadImage.js",["123"],"import React, { useRef, useState } from 'react'\n\nfunction useUploadImage() {\n    const [photoUrl, setPhotoUrl] = useState('')\n    const [photoFile, setPhotoFile] = useState(null)\n    const [hasItBeenUsed, sethasItBeenUsed] = useState(false)\n\n    const ref = useRef(null)\n\n    async function updatePhoto(e) {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n\n        setPhotoFile(file)\n        sethasItBeenUsed(true)\n        reader.addEventListener('load', function () {\n            setPhotoUrl(reader.result)\n        }, false)\n\n        if (file) {\n            reader.readAsDataURL(file)\n        }\n    }\n\n    return { photoUrl, photoFile, ref, updatePhoto, hasItBeenUsed, setPhotoUrl }\n}\n\nexport default useUploadImage","/home/joao/dev/twitter-clone/view/src/components/UserList.js",["124"],"/home/joao/dev/twitter-clone/view/src/components/FollowingStatus.js",[],"/home/joao/dev/twitter-clone/view/src/components/FollowButton.js",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":3,"column":48,"nodeType":"131","messageId":"132","endLine":3,"endColumn":57},{"ruleId":"129","severity":1,"message":"133","line":13,"column":12,"nodeType":"131","messageId":"132","endLine":13,"endColumn":19},{"ruleId":"129","severity":1,"message":"134","line":13,"column":21,"nodeType":"131","messageId":"132","endLine":13,"endColumn":31},{"ruleId":"135","severity":1,"message":"136","line":48,"column":19,"nodeType":"137","messageId":"138","endLine":48,"endColumn":21},{"ruleId":"135","severity":1,"message":"136","line":48,"column":88,"nodeType":"137","messageId":"138","endLine":48,"endColumn":90},{"ruleId":"139","severity":1,"message":"140","line":57,"column":8,"nodeType":"141","endLine":57,"endColumn":40,"suggestions":"142"},{"ruleId":"129","severity":1,"message":"143","line":16,"column":9,"nodeType":"131","messageId":"132","endLine":16,"endColumn":16},{"ruleId":"129","severity":1,"message":"144","line":23,"column":26,"nodeType":"131","messageId":"132","endLine":23,"endColumn":41},{"ruleId":"139","severity":1,"message":"145","line":32,"column":8,"nodeType":"141","endLine":32,"endColumn":31,"suggestions":"146"},{"ruleId":"129","severity":1,"message":"147","line":1,"column":40,"nodeType":"131","messageId":"132","endLine":1,"endColumn":46},{"ruleId":"129","severity":1,"message":"143","line":25,"column":24,"nodeType":"131","messageId":"132","endLine":25,"endColumn":31},{"ruleId":"129","severity":1,"message":"148","line":25,"column":33,"nodeType":"131","messageId":"132","endLine":25,"endColumn":38},{"ruleId":"139","severity":1,"message":"149","line":115,"column":8,"nodeType":"141","endLine":115,"endColumn":40,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":239,"column":41,"nodeType":"153","endLine":239,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":283,"column":25,"nodeType":"156","endLine":287,"endColumn":27},{"ruleId":"139","severity":1,"message":"157","line":21,"column":8,"nodeType":"141","endLine":21,"endColumn":13,"suggestions":"158"},{"ruleId":"129","severity":1,"message":"159","line":36,"column":9,"nodeType":"131","messageId":"132","endLine":36,"endColumn":22},{"ruleId":"129","severity":1,"message":"160","line":38,"column":9,"nodeType":"131","messageId":"132","endLine":38,"endColumn":20},{"ruleId":"129","severity":1,"message":"161","line":9,"column":5,"nodeType":"131","messageId":"132","endLine":9,"endColumn":11},{"ruleId":"129","severity":1,"message":"162","line":11,"column":5,"nodeType":"131","messageId":"132","endLine":11,"endColumn":15},{"ruleId":"129","severity":1,"message":"148","line":36,"column":13,"nodeType":"131","messageId":"132","endLine":36,"endColumn":18},{"ruleId":"129","severity":1,"message":"163","line":10,"column":8,"nodeType":"131","messageId":"132","endLine":10,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":155,"column":37,"nodeType":"156","endLine":155,"endColumn":90},{"ruleId":"129","severity":1,"message":"164","line":1,"column":8,"nodeType":"131","messageId":"132","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"165","line":34,"column":8,"nodeType":"141","endLine":34,"endColumn":10,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logIn', 'switchBgTheme', and 'switchColorTheme'. Either include them or remove the dependency array.","ArrayExpression",["169"],"'setUser' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchPosts', 'setIsFetched', and 'setPosts'. Either include them or remove the dependency array.",["170"],"'useRef' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'API', 'setCoverPhotoUrl', and 'setProfilePhotoUrl'. Either include them or remove the dependency array.",["171"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.",["172"],"'hasItBeenUsed' is assigned a value but never used.","'setPhotoUrl' is assigned a value but never used.","'faBell' is defined but never used.","'faEnvelope' is defined but never used.","'formatNumber' is defined but never used.","'React' is defined but never used.","React Hook useEffect has missing dependencies: 'API', 'list', and 'users.length'. Either include them or remove the dependency array.",["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [token, themeLoaded, reloadUser, logIn, switchBgTheme, switchColorTheme]",{"range":"184","text":"185"},"Update the dependencies array to be: [API, token, isFetched, fetchPosts, setPosts, setIsFetched]",{"range":"186","text":"187"},"Update the dependencies array to be: [whose, isFetched, name, reload, API, setProfilePhotoUrl, setCoverPhotoUrl]",{"range":"188","text":"189"},"Update the dependencies array to be: [handleClickOutside, ref]",{"range":"190","text":"191"},"Update the dependencies array to be: [API, list, users.length]",{"range":"192","text":"193"},[1804,1836],"[token, themeLoaded, reloadUser, logIn, switchBgTheme, switchColorTheme]",[749,772],"[API, token, isFetched, fetchPosts, setPosts, setIsFetched]",[3702,3734],"[whose, isFetched, name, reload, API, setProfilePhotoUrl, setCoverPhotoUrl]",[634,639],"[handleClickOutside, ref]",[1025,1027],"[API, list, users.length]"]