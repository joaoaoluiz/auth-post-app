[{"/home/joao/dev/twitter-clone/view/src/index.js":"1","/home/joao/dev/twitter-clone/view/src/App.js":"2","/home/joao/dev/twitter-clone/view/src/context/token.js":"3","/home/joao/dev/twitter-clone/view/src/pages/Login.js":"4","/home/joao/dev/twitter-clone/view/src/pages/Home.js":"5","/home/joao/dev/twitter-clone/view/src/pages/Profile.js":"6","/home/joao/dev/twitter-clone/view/src/hooks/useHideOnOutsideClick.js":"7","/home/joao/dev/twitter-clone/view/src/pages/SignUp.js":"8","/home/joao/dev/twitter-clone/view/src/components/MainSideBar.js":"9","/home/joao/dev/twitter-clone/view/src/components/ToggleableSideBar.js":"10","/home/joao/dev/twitter-clone/view/src/components/InputField.js":"11","/home/joao/dev/twitter-clone/view/src/components/Tweetar.js":"12","/home/joao/dev/twitter-clone/view/src/components/ProfilePicture.js":"13","/home/joao/dev/twitter-clone/view/src/components/ShadedBox.js":"14","/home/joao/dev/twitter-clone/view/src/components/TweetCard.js":"15","/home/joao/dev/twitter-clone/view/src/components/DateInput.js":"16","/home/joao/dev/twitter-clone/view/src/functions/useDates.js":"17","/home/joao/dev/twitter-clone/view/src/functions/formatNumber.js":"18","/home/joao/dev/twitter-clone/view/src/hooks/useUploadImage.js":"19"},{"size":407,"mtime":1611596212616,"results":"20","hashOfConfig":"21"},{"size":2410,"mtime":1611623569503,"results":"22","hashOfConfig":"21"},{"size":5593,"mtime":1611625324907,"results":"23","hashOfConfig":"21"},{"size":2489,"mtime":1611596212616,"results":"24","hashOfConfig":"21"},{"size":1573,"mtime":1611596212616,"results":"25","hashOfConfig":"21"},{"size":16273,"mtime":1611668978103,"results":"26","hashOfConfig":"21"},{"size":722,"mtime":1611596212616,"results":"27","hashOfConfig":"21"},{"size":9516,"mtime":1611666169683,"results":"28","hashOfConfig":"21"},{"size":8247,"mtime":1611596212616,"results":"29","hashOfConfig":"21"},{"size":8683,"mtime":1611596212616,"results":"30","hashOfConfig":"21"},{"size":1161,"mtime":1611615407129,"results":"31","hashOfConfig":"21"},{"size":2481,"mtime":1611670000557,"results":"32","hashOfConfig":"21"},{"size":443,"mtime":1611617121215,"results":"33","hashOfConfig":"21"},{"size":402,"mtime":1611667173996,"results":"34","hashOfConfig":"21"},{"size":8373,"mtime":1611596212616,"results":"35","hashOfConfig":"21"},{"size":1296,"mtime":1611596212616,"results":"36","hashOfConfig":"21"},{"size":2169,"mtime":1611596212616,"results":"37","hashOfConfig":"21"},{"size":278,"mtime":1611596212616,"results":"38","hashOfConfig":"21"},{"size":747,"mtime":1611624078888,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"cwvrlo",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"/home/joao/dev/twitter-clone/view/src/index.js",[],["86","87"],"/home/joao/dev/twitter-clone/view/src/App.js",["88"],"import React, { useContext } from 'react'\n\nimport { Switch, Route, Redirect, useLocation, useParams } from \"react-router-dom\"\n\nimport Login from './pages/Login'\nimport SignUp from './pages/SignUp'\nimport Home from './pages/Home'\nimport MainSideBar from './components/MainSideBar'\n\nimport { Context } from './context/token'\nimport ToggleableSideBar from './components/ToggleableSideBar'\nimport useHideOnOutsideClick from './hooks/useHideOnOutsideClick'\nimport Profile from './pages/Profile'\nimport { Helmet } from 'react-helmet'\n\nfunction App() {\n    const { token } = useContext(Context)\n    const location = useLocation()\n\n    const {\n        ref: refTgSideBar,\n        setVisible: setVisibleTgSideBar,\n        visible: visibleTgSideBar\n    } = useHideOnOutsideClick()\n\n    return (\n        <div className='app'>\n            <Helmet>\n                <title>Twitter</title>\n            </Helmet>\n            {!token && <Redirect to=\"/login\" />}\n            {!location.pathname.match(/(\\/login|\\/sign-up)/) &&\n                <>\n                    <MainSideBar\n                        refTgSideBar={refTgSideBar}\n                        setVisibleTgSideBar={setVisibleTgSideBar}\n                        visibleTgSideBar={visibleTgSideBar}\n                    />\n                    <ToggleableSideBar\n                        refTgSideBar={refTgSideBar}\n                        setVisibleTgSideBar={setVisibleTgSideBar}\n                        visibleTgSideBar={visibleTgSideBar}\n                    />\n                </>\n            }\n            <div className='app__main'>\n                <Switch>\n\n                    <Route path='/login'>\n                        <Login />\n                    </Route>\n\n                    <Route path='/sign-up'>\n                        <SignUp />\n                    </Route>\n                    <Route path='/aa'>\n                    </Route>\n\n                    <Route exact path='/'>\n                        <Home setVisibleTgSideBar={setVisibleTgSideBar} />\n                    </Route>\n\n                    <Route path='/profile/:name'>\n                        <Profile />\n                    </Route>\n                </Switch>\n            </div>\n            {!location.pathname.match(/(\\/login|\\/sign-up)/) &&\n                <div className='app__trending' style={{ width: 400 }}>\n\n                </div>\n            }\n\n        </div >\n    )\n}\n\nexport default App","/home/joao/dev/twitter-clone/view/src/context/token.js",["89","90","91","92","93"],"import React, { useState, useEffect } from 'react'\n\nconst Context = React.createContext()\n\nfunction ContextProvider({ children }) {\n    const [token, setToken] = useState(localStorage.getItem('token') || '')\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')) || { following: [], followers: [] })\n    const [posts, setPosts] = useState([])\n    const [isFetched, setIsFetched] = useState(false)\n    const [selectedTheme, setSelectedTheme] = useState(JSON.parse(localStorage.getItem('theme'))\n        || { color: 0, bg: 0 })\n    const [themeLoaded, setThemeLoaded] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [reloadUser, setReloadUser] = useState(false)\n\n    async function getUser() {\n        const response = await fetch(`${API}/user/profile`, {\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': token\n            },\n        })\n        let data = await response.json()\n\n        if (response.ok) {\n            setUser(data)\n            return data\n        }\n    }\n\n    async function fetchPosts(url, setter) {\n        const response = await fetch(`${API}/${url}`, {\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': token\n            },\n        })\n\n        let data = await response.json()\n\n        if (response.ok)\n            setter(data.results)\n    }\n\n    useEffect(() => {\n        if (token && (!localStorage.getItem('token') || !localStorage.getItem('user')) || reloadUser) {\n            logIn()\n            setReloadUser(false)\n        }\n        if (!themeLoaded) {\n            switchBgTheme()\n            switchColorTheme()\n            setThemeLoaded(true)\n        }\n    }, [token, themeLoaded, reloadUser])\n\n    async function logIn() {\n        localStorage.setItem('token', token)\n        localStorage.setItem('user', JSON.stringify(await getUser()))\n        setIsFetched(false)\n    }\n\n    function logOff() {\n        localStorage.removeItem('token')\n        localStorage.removeItem('user')\n        setToken('')\n        setUser({ following: [], followers: [] })\n    }\n\n\n    const colorThemes = [\n        [203, 89, 53, 1],\n        [38, 100, 56, 1],\n        [341, 75, 51, 1],\n        [263, 51, 53, 1],\n        [17, 91, 55, 1],\n        [141, 73, 42, 1],\n    ]\n\n    const bgThemes = [\n        { primary: [0, 100, 100, 1], secondary: [257, 41, 97, 1], txt: '#000000', border: '#f5f3fa' },\n        { primary: [210, 34, 13, 1], txt: '#ffffff', border: '#38444d' },\n        { primary: [0, 0, 0, 1], txt: '#ffffff', border: '#2f3336' },\n    ]\n\n    function getHsla(values, modifier = 0, lighter = false) {\n        return `hsla(${values[0]}, ${values[1]}%, ${values[2] + (modifier < 0 || lighter ? modifier : 0)}%, ${modifier > 0 && !lighter ? `0.${modifier}` : values[3]})`\n    }\n\n    function switchColorTheme(option = selectedTheme.color) {\n        document.documentElement.style.setProperty('--main-color', getHsla(colorThemes[option]))\n        document.documentElement.style.setProperty('--light-main-color', getHsla(colorThemes[option], 22))\n        document.documentElement.style.setProperty('--dark-main-color', getHsla(colorThemes[option], -10))\n\n        setSelectedTheme(prev => ({ ...prev, color: option }))\n        localStorage.setItem('theme', JSON.stringify({ bg: selectedTheme.bg, color: option }))\n\n    }\n\n    function switchBgTheme(option = selectedTheme.bg) {\n        document.documentElement.style.setProperty('--bg-color', getHsla(bgThemes[option].primary))\n        document.documentElement.style.setProperty('--txt-color', bgThemes[option].txt)\n        document.documentElement.style.setProperty('--border-color', bgThemes[option].border)\n\n\n        if (bgThemes[option].secondary) {\n            document.documentElement.style.setProperty('--secondary-bg-color',\n                getHsla(bgThemes[option].secondary)\n            )\n            document.documentElement.style.setProperty('--logo', '#1da0f2')\n        }\n\n        else {\n            document.documentElement.style.setProperty('--secondary-bg-color',\n                getHsla(bgThemes[option].primary, 5, true)\n            )\n            document.documentElement.style.setProperty('--logo', '#ffffff')\n        }\n        localStorage.setItem('theme', JSON.stringify({ color: selectedTheme.color, bg: option }))\n\n        setSelectedTheme(prev => ({ ...prev, bg: option }))\n    }\n\n\n    const API = \"http://localhost:1234/api\"\n\n    const parseMessage = {\n        ['\"display_name\" is not allowed to be empty']: 'Name is required',\n        ['\"email\" is not allowed to be empty']: 'Email is required',\n        ['\"email\" must be a valid email']: 'Invalid email',\n        ['\"password\" is not allowed to be empty']: 'Password is required',\n        ['\"password\" length must be at least 8 characters long']: 'Password must be at least 8 characters long'// eslint-disable-line \n    }\n\n    return (\n        <Context.Provider value={({\n            token,\n            setToken,\n            API,\n            parseMessage,\n            logOff,\n            user,\n            setUser,\n            isFetched,\n            setIsFetched,\n            switchColorTheme,\n            switchBgTheme,\n            getHsla,\n            colorThemes,\n            bgThemes,\n            selectedTheme,\n            setSelectedTheme,\n            fetchPosts,\n            posts,\n            setPosts,\n            setReloadUser\n        })}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport { Context, ContextProvider }","/home/joao/dev/twitter-clone/view/src/pages/Login.js",[],"/home/joao/dev/twitter-clone/view/src/pages/Home.js",["94","95","96"],"import { useContext, useEffect, useState } from \"react\"\nimport { Helmet } from \"react-helmet\";\n\nimport ProfilePicture from \"../components/ProfilePicture\"\nimport Tweetar from '../components/Tweetar'\nimport TweetCard from \"../components/TweetCard\"\n\nimport { Context } from '../context/token'\nimport '../styles/home.css'\n\nfunction Home({ setVisibleTgSideBar }) {\n    const {\n        API,\n        token,\n        user,\n        setUser,\n        isFetched,\n        setIsFetched,\n        posts,\n        setPosts,\n        fetchPosts\n    } = useContext(Context)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n\n        if (!isFetched) {\n            fetchPosts(`post`, setPosts)\n            setIsFetched(true)\n        }\n\n    }, [API, token, isFetched])\n\n    const timeline = posts.map(post => (\n        <TweetCard\n            key={post['_id']}\n            post={post}\n            user={user}\n            setPosts={setPosts}\n        />\n    ))\n\n    return (\n        <div className='home'>\n            <Helmet>\n                <title>Página Inicial / Twitter</title>\n            </Helmet>\n            <div className='header'>\n                <div className='header__profilePicture'>\n                    <ProfilePicture url={user.photo} callback={() => setVisibleTgSideBar(true)} />\n                </div>\n                <h1 className='header__title'>Página Inicial</h1>\n            </div>\n            <Tweetar customClass={{ container: 'home' }} />\n            {timeline}\n            <p>{errorMessage}</p>\n\n        </div>\n\n    )\n}\n\n\nexport default Home","/home/joao/dev/twitter-clone/view/src/pages/Profile.js",["97","98","99","100"],"/home/joao/dev/twitter-clone/view/src/hooks/useHideOnOutsideClick.js",["101"],"import { useEffect, useRef, useState } from \"react\"\n\nconst useHideOnOutsideClick = () => {\n    const ref = useRef(null)\n    const [visible, setVisible] = useState(false)\n\n    function handleClickOutside(event) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setVisible(false)\n\n            document.removeEventListener(\"mousedown\", handleClickOutside)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('click', handleClickOutside, true)\n        return () => {\n            document.addEventListener('click', handleClickOutside, true)\n            setVisible(false)\n        }\n    }, [ref])\n\n\n    return { ref, visible, setVisible }\n}\n\nexport default useHideOnOutsideClick","/home/joao/dev/twitter-clone/view/src/pages/SignUp.js",["102","103"],"/home/joao/dev/twitter-clone/view/src/components/MainSideBar.js",["104","105","106"],"import React, { useContext } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\"\n\nimport { Context } from '../context/token'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faHome,\n    faBell,\n    faHashtag,\n    faEnvelope,\n    faUser,\n    faSearch,\n    faTimes,\n    faFeatherAlt,\n    faPlus,\n    faEllipsisH\n} from '@fortawesome/free-solid-svg-icons'\nimport {\n    faBell as farBell,\n    faEnvelope as farEnvelope,\n    faUser as farUser\n} from '@fortawesome/free-regular-svg-icons'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nimport '../styles/app.css'\nimport '../styles/hover.css'\nimport Tweetar from './Tweetar'\nimport ProfilePicture from './ProfilePicture'\nimport useHideOnOutsideClick from '../hooks/useHideOnOutsideClick'\nimport ShadedBox from './ShadedBox'\n\n\n\nfunction MainmainSideBar({ setVisibleTgSideBar }) {\n    const { token, user, logOff } = useContext(Context)\n    const location = useLocation()\n    const history = useHistory()\n\n    const {\n        ref: refTweetar,\n        visible: visibleTweetar,\n        setVisible: setVisibleTweetar\n    } = useHideOnOutsideClick()\n\n    const {\n        ref: refProfileDetails,\n        visible: visibleProfileDetails,\n        setVisible: setVisibleProfileDetails\n    } = useHideOnOutsideClick()\n\n    const navbarItens = [\n        {\n            icon: faTwitter,\n            label: '',\n            class: 'navbar__item--twitter',\n        },\n        {\n            icon: faHome,\n            label: 'Página Inicial',\n            path: '/',\n            action: () => { history.push(`/`) }\n        },\n        {\n            icon: faHashtag,\n            label: 'Explorar',\n            class: 'navbar__item--hashtag'\n        },\n\n        {\n            icon: faSearch,\n            label: 'Pesquisar',\n            class: 'navbar__item--search'\n        },\n        {\n            icon: farBell,\n            label: 'Notificações'\n        },\n        {\n            icon: farEnvelope,\n            label: 'Mensagens'\n        },\n        {\n            icon: location.pathname === `/profile/${user.name}` ? faUser : farUser,\n            label: 'Perfil',\n            class: 'navbar__item--profile',\n            path: `/profile/${user.name}`,\n            action: () => { history.push(`/profile/${user.name}`) }\n        }, {\n            icon: faEllipsisH,\n            label: 'Mais',\n            class: 'navbar__item--more',\n            action: () => setVisibleTgSideBar(true)\n        },\n    ]\n\n    return (\n        <>\n            <div className='app__mainSideBar'>\n                <nav className='navbar'>\n                    <ul className='navbar__list'>\n                        {navbarItens.map(item => (\n                            <li className={`navbar__item\n                                    ${item.class ? item.class : ''}\n                                    ${item.path === location.pathname ? 'selectedIcon' : ''}\n                                    `}\n                                key={item.label}\n                                onClick={item.action}\n                            >\n                                <div className={`navbar__item__icon`}>\n                                    <FontAwesomeIcon icon={item.icon} />\n                                </div>\n                                {item.label &&\n                                    <p className='navbar__item__label'>{item.label}</p>\n                                }\n                            </li>\n                        ))}\n                        <li className='navlist__tweetarBtn--circular--mainSideBar'>\n                            <button\n                                className='blueButton navlist__tweetarBtn--circular--mainSideBar navlist__tweetarBtn--circular'\n                                onClick={() => setVisibleTweetar(true)}\n                            >\n                                <div >\n                                    <FontAwesomeIcon\n                                        className='tweetarBtn__icon1'\n                                        icon={faFeatherAlt}\n                                    />\n                                    <FontAwesomeIcon\n                                        className='tweetarBtn__icon2'\n                                        icon={faPlus}\n                                    />\n                                </div>\n                            </button>\n                        </li>\n                    </ul>\n                    <button\n                        className='blueButton navlist__tweetarBtn'\n                        onClick={() => setVisibleTweetar(true)}\n                    >\n                        Tweetar\n                        </button>\n                </nav>\n\n                <div className='mainSideBar__profileCard__wrapper' ref={refProfileDetails}>\n                    <div\n                        className='mainSideBar__profileCard--min mainSideBar__profileCard'\n                        onClick={() => setVisibleProfileDetails(prev => !prev)}\n                    >\n                        <div className='profileCard__photo'>\n                            <ProfilePicture url={user.photo} />\n                        </div>\n                        <div className='profileCard__id profileCard__id--mediaQuerry'>\n                            <h3 className='displayName'>{user['display_name']}</h3>\n                            <h4 className='username'>@{user.name}</h4>\n                        </div>\n                        <FontAwesomeIcon className='tweet__showOptions profileCard__id--mediaQuerry' icon={faEllipsisH} />\n                    </div>\n                    <div\n\n                        className='profileCard__details'\n                        style={{\n                            transform: `scale(${visibleProfileDetails ? '1' : '0'})`\n                        }}\n                    >\n                        <div className='mainSideBar__profileCard profileCard__details__header'>\n                            <div className='profileCard__photo'>\n                                <ProfilePicture url={user.photo} />\n                            </div>\n                            <div className='profileCard__id'>\n                                <h3 className='displayName'>{user['display_name']}</h3>\n                                <h4 className='username'>@{user.name}</h4>\n                            </div>\n                        </div>\n                        <p onClick={logOff} className='profileCard__details__logOff'>\n                            Sair de @{user.name}\n                        </p>\n                    </div>\n\n                </div>\n            </div>\n\n            <ShadedBox condition={visibleTweetar}>\n                <div\n                    className='app__tweetar' ref={refTweetar}\n                    style={{ display: visibleTweetar ? 'unset' : 'none' }}\n                >\n                    <div className='app__tweetar__header navHeader'>\n                        <button\n                            className='app__tweetar__close navHeader__icon'\n                            onClick={() => setVisibleTweetar(false)}\n                        >\n                            <FontAwesomeIcon icon={faTimes} />\n                        </button>\n                    </div>\n                    <div className='app__tweetar__main'>\n                        <Tweetar\n                            setVisible={setVisibleTweetar}\n                            customClass={{ input: 'app', button: 'app' }}\n                        />\n                    </div>\n                </div>\n            </ShadedBox>\n\n            <button\n                className='blueButton navlist__tweetarBtn--circular navlist__tweetarBtn--circular--absolute'\n                onClick={() => setVisibleTweetar(true)}\n            >\n                <div >\n                    <FontAwesomeIcon\n                        className='tweetarBtn__icon1'\n                        icon={faFeatherAlt}\n                    />\n                    <FontAwesomeIcon\n                        className='tweetarBtn__icon2'\n                        icon={faPlus}\n                    />\n                </div>\n            </button>\n\n        </>\n\n    )\n}\n\nexport default MainmainSideBar","/home/joao/dev/twitter-clone/view/src/components/ToggleableSideBar.js",["107"],"import { faTimes, faUser, faCog, faBrush, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useContext } from 'react'\n\n\nimport '../styles/toggleableSideBar.css'\nimport ProfilePicture from './ProfilePicture'\nimport useHideOnOutsideClick from '../hooks/useHideOnOutsideClick'\nimport ShadedBox from './ShadedBox'\nimport formatNumber from '../functions/formatNumber'\n\nimport { Context } from '../context/token'\nimport { useHistory } from 'react-router-dom'\n\nfunction ToggleableSideBar({ visibleTgSideBar, setVisibleTgSideBar, refTgSideBar }) {\n    const history = useHistory()\n\n    const { user,\n        logOff,\n        getHsla,\n        colorThemes,\n        bgThemes,\n        switchColorTheme,\n        switchBgTheme,\n        selectedTheme,\n        setSelectedTheme\n    } = useContext(Context)\n\n    const {\n        ref: refThemes,\n        visible: visibleThemes,\n        setVisible: setVisibleThemes\n    } = useHideOnOutsideClick()\n\n    const menuItens = [\n        {\n            icon: faUser,\n            label: 'Perfil',\n            action: () => {\n                history.push(`/profile/${user.name}`)\n            }\n        },\n        {\n            icon: faCog,\n            label: 'Configurações e privacidade'\n        },\n        {\n            icon: faBrush,\n            label: 'Tela',\n            action: () => setVisibleThemes(true)\n        },\n        {\n            label: 'Sair',\n            class: 'toggleableSideBar__buttons__item--sair',\n            action: logOff\n        }\n    ]\n\n    const colorItens = [\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f499.svg', color: colorThemes[0] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/2b50.svg', color: colorThemes[1] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f338.svg', color: colorThemes[2] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f419.svg', color: colorThemes[3] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f525.svg', color: colorThemes[4] },\n        { icon: 'https://abs-0.twimg.com/emoji/v2/svg/1f951.svg', color: colorThemes[5] }\n    ]\n\n    const bgItens = [\n        { label: 'Padrão', color: bgThemes[0] },\n        { label: 'Um pouco escuro', color: bgThemes[1] },\n        { label: 'Superescuro', color: bgThemes[2] }\n    ]\n\n    return (\n        <div className='toggleableSideBar--wrapper'>\n            <ShadedBox condition={visibleTgSideBar}>\n            </ShadedBox>\n            <div\n                className='toggleableSideBar' ref={refTgSideBar}\n                style={{\n                    transform: `translateX(${visibleTgSideBar ? '0' : '-125%'})`,\n                    transition: 'transform .2s ease-in-out'\n                }}\n            >\n                <header className='toggleableSideBar__header'>\n                    <h1 className='toggleableSideBar__title'>Informações da conta</h1>\n                    <button\n                        className='app__tweetar__close navHeader__icon'\n                        onClick={() => setVisibleTgSideBar(false)}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                    </button>\n                </header>\n                <div className='toggleableSideBar__profile'>\n                    <div className='toggleableSideBar__picture'>\n                        <ProfilePicture url={user.photo} />\n                    </div>\n                    <div className='toggleableSideBar__id'>\n                        <h3 className='displayName'>{user['display_name']}</h3>\n                        <h4 className='username'>@{user.name}</h4>\n                    </div>\n                    <div className='followingStatus'>\n                        <p>\n                            <span className='followingStatus__number'>{formatNumber(user.following.length)} </span>\n                            Seguindo\n                        </p>\n                        <p>\n                            <span className='followingStatus__number'>{formatNumber(user.followers.length)} </span>\n                            Seguidores\n                        </p>\n                    </div>\n                </div>\n                <div className='toggleableSideBar__buttons'>\n                    {menuItens.map(item => (\n                        <button\n                            className={`toggleableSideBar__buttons__item\n                                ${item.class ? item.class : ''}`\n                            }\n                            key={item.label}\n                            onClick={() => {\n                                if (item.action) {\n                                    item.action()\n                                    setVisibleTgSideBar(false)\n                                }\n                            }}\n                        >\n                            {item.icon &&\n                                <FontAwesomeIcon className='toggleableSideBar__icon' icon={item.icon} />\n                            }\n                            <p>{item.label}</p>\n                        </button>\n                    ))}\n                </div>\n            </div>\n            <ShadedBox condition={visibleThemes}>\n                <div className='themes' ref={refThemes}>\n                    <div className='themes__header' >\n                        <FontAwesomeIcon\n                            className='themes__close' icon={faTimes}\n                            onClick={() => setVisibleThemes(false)}\n                        />\n                        <h1 className='themes__title'>Personalizar sua exibição</h1>\n                    </div>\n                    <div className='themes--wrapper'>\n                        <p className='themes__label'>Color</p>\n                        <div className='themes__color themes__box'>\n                            {colorItens.map((item, i) => (\n                                <div className='themes__color__item' key={item.color}>\n                                    <button\n                                        className='color__item__button'\n                                        style={{ background: getHsla(item.color) }}\n                                        onClick={() => switchColorTheme(i)}\n                                    >\n                                        {selectedTheme.color === i &&\n                                            <FontAwesomeIcon className='color__item__checked' icon={faCheck} />\n                                        }\n                                    </button>\n                                    <img className='color__item__icon' src={item.icon} />\n\n                                </div>\n                            ))}\n                        </div>\n                        <p className='themes__label'>Plano de fundo</p>\n                        <div className='themes__box themes__bg'>\n                            {\n                                bgItens.map((item, i) => (\n                                    <div className='themes__bg__item'\n                                        key={i}\n                                        style={{\n                                            background: getHsla(item.color.primary),\n                                            color: item.color.txt,\n                                            border: selectedTheme.bg === i ?\n                                                `solid ${getHsla(colorThemes[selectedTheme.color])} 4px`\n                                                : 'none'\n                                        }}\n                                        onClick={() => setSelectedTheme(() => switchBgTheme(i))}\n                                    >\n                                        <input\n                                            className='bg__item__icon'\n                                            type='radio'\n                                            checked={selectedTheme.bg === i}\n                                            onClick={() => { }}\n                                        />\n                                        <label className='bg__item__label'> {item.label}</label>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                    <button\n                        className='blueButton themes__button'\n                        onClick={() => setVisibleThemes(false)}\n                    >\n                        Concluído\n                    </button>\n                </div>\n            </ShadedBox>\n        </div>\n    )\n}\n\nexport default ToggleableSideBar","/home/joao/dev/twitter-clone/view/src/components/InputField.js",[],"/home/joao/dev/twitter-clone/view/src/components/Tweetar.js",[],"/home/joao/dev/twitter-clone/view/src/components/ProfilePicture.js",[],"/home/joao/dev/twitter-clone/view/src/components/ShadedBox.js",[],"/home/joao/dev/twitter-clone/view/src/components/TweetCard.js",[],"/home/joao/dev/twitter-clone/view/src/components/DateInput.js",[],"/home/joao/dev/twitter-clone/view/src/functions/useDates.js",[],"/home/joao/dev/twitter-clone/view/src/functions/formatNumber.js",[],"/home/joao/dev/twitter-clone/view/src/hooks/useUploadImage.js",["108"],"import React, { useRef, useState } from 'react'\n\nfunction useUploadImage() {\n    const [photoUrl, setPhotoUrl] = useState('')\n    const [photoFile, setPhotoFile] = useState(null)\n    const [hasItBeenUsed, sethasItBeenUsed] = useState(false)\n\n    const ref = useRef(null)\n\n    async function updatePhoto(e) {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n\n        setPhotoFile(file)\n        sethasItBeenUsed(true)\n        reader.addEventListener('load', function () {\n            setPhotoUrl(reader.result)\n        }, false)\n\n        if (file) {\n            reader.readAsDataURL(file)\n        }\n    }\n\n    return { photoUrl, photoFile, ref, updatePhoto, hasItBeenUsed, setPhotoUrl }\n}\n\nexport default useUploadImage",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":3,"column":48,"nodeType":"115","messageId":"116","endLine":3,"endColumn":57},{"ruleId":"113","severity":1,"message":"117","line":13,"column":12,"nodeType":"115","messageId":"116","endLine":13,"endColumn":19},{"ruleId":"113","severity":1,"message":"118","line":13,"column":21,"nodeType":"115","messageId":"116","endLine":13,"endColumn":31},{"ruleId":"119","severity":1,"message":"120","line":48,"column":19,"nodeType":"121","messageId":"122","endLine":48,"endColumn":21},{"ruleId":"119","severity":1,"message":"120","line":48,"column":88,"nodeType":"121","messageId":"122","endLine":48,"endColumn":90},{"ruleId":"123","severity":1,"message":"124","line":57,"column":8,"nodeType":"125","endLine":57,"endColumn":40,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"127","line":16,"column":9,"nodeType":"115","messageId":"116","endLine":16,"endColumn":16},{"ruleId":"113","severity":1,"message":"128","line":23,"column":26,"nodeType":"115","messageId":"116","endLine":23,"endColumn":41},{"ruleId":"123","severity":1,"message":"129","line":32,"column":8,"nodeType":"125","endLine":32,"endColumn":31,"suggestions":"130"},{"ruleId":"113","severity":1,"message":"131","line":1,"column":40,"nodeType":"115","messageId":"116","endLine":1,"endColumn":46},{"ruleId":"123","severity":1,"message":"132","line":111,"column":8,"nodeType":"125","endLine":111,"endColumn":40,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":267,"column":33,"nodeType":"136","endLine":267,"endColumn":48},{"ruleId":"137","severity":1,"message":"138","line":319,"column":17,"nodeType":"139","endLine":323,"endColumn":19},{"ruleId":"123","severity":1,"message":"140","line":21,"column":8,"nodeType":"125","endLine":21,"endColumn":13,"suggestions":"141"},{"ruleId":"113","severity":1,"message":"142","line":36,"column":9,"nodeType":"115","messageId":"116","endLine":36,"endColumn":22},{"ruleId":"113","severity":1,"message":"143","line":38,"column":9,"nodeType":"115","messageId":"116","endLine":38,"endColumn":20},{"ruleId":"113","severity":1,"message":"144","line":9,"column":5,"nodeType":"115","messageId":"116","endLine":9,"endColumn":11},{"ruleId":"113","severity":1,"message":"145","line":11,"column":5,"nodeType":"115","messageId":"116","endLine":11,"endColumn":15},{"ruleId":"113","severity":1,"message":"146","line":36,"column":13,"nodeType":"115","messageId":"116","endLine":36,"endColumn":18},{"ruleId":"137","severity":1,"message":"138","line":158,"column":37,"nodeType":"139","endLine":158,"endColumn":90},{"ruleId":"113","severity":1,"message":"147","line":1,"column":8,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logIn', 'switchBgTheme', and 'switchColorTheme'. Either include them or remove the dependency array.","ArrayExpression",["150"],"'setUser' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchPosts', 'setIsFetched', and 'setPosts'. Either include them or remove the dependency array.",["151"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'API', 'setCoverPhotoUrl', and 'setProfilePhotoUrl'. Either include them or remove the dependency array.",["152"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.",["153"],"'hasItBeenUsed' is assigned a value but never used.","'setPhotoUrl' is assigned a value but never used.","'faBell' is defined but never used.","'faEnvelope' is defined but never used.","'token' is assigned a value but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [token, themeLoaded, reloadUser, logIn, switchBgTheme, switchColorTheme]",{"range":"162","text":"163"},"Update the dependencies array to be: [API, token, isFetched, fetchPosts, setPosts, setIsFetched]",{"range":"164","text":"165"},"Update the dependencies array to be: [whose, isFetched, name, reload, API, setProfilePhotoUrl, setCoverPhotoUrl]",{"range":"166","text":"167"},"Update the dependencies array to be: [handleClickOutside, ref]",{"range":"168","text":"169"},[1804,1836],"[token, themeLoaded, reloadUser, logIn, switchBgTheme, switchColorTheme]",[749,772],"[API, token, isFetched, fetchPosts, setPosts, setIsFetched]",[3526,3558],"[whose, isFetched, name, reload, API, setProfilePhotoUrl, setCoverPhotoUrl]",[634,639],"[handleClickOutside, ref]"]